apiVersion: v1
kind: ServiceAccount
metadata:
  name: omsagent
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: omsagent-reader
rules:
  - apiGroups: [""]
    resources:
      [
        "pods",
        "events",
        "nodes",
        "nodes/stats",
        "nodes/metrics",
        "nodes/spec",
        "nodes/proxy",
        "namespaces",
        "services",
        "persistentvolumes"
      ]
    verbs: ["list", "get", "watch"]
  - apiGroups: ["apps", "extensions", "autoscaling"]
    resources: ["replicasets", "deployments", "horizontalpodautoscalers"]
    verbs: ["list"]
  - apiGroups: ["azmon.container.insights"]
    resources: ["healthstates"]
    verbs: ["get", "create", "patch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: omsagentclusterrolebinding
subjects:
  - kind: ServiceAccount
    name: omsagent
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: omsagent-reader
  apiGroup: rbac.authorization.k8s.io
---
kind: ConfigMap
apiVersion: v1
data:
  kube.conf: |-
    # Fluentd config file for OMS Docker - cluster components (kubeAPI)
     #fluent forward plugin
     <source>
      type forward
      port "#{ENV['HEALTHMODEL_REPLICASET_SERVICE_SERVICE_PORT']}"
      bind 0.0.0.0
      chunk_size_limit 4m
     </source>

     #Kubernetes pod inventory
     <source>
      type kubepodinventory
      tag oms.containerinsights.KubePodInventory
      run_interval 60
      log_level debug
     </source>

     #Kubernetes Persistent Volume inventory
     <source>
      type kubepvinventory
      tag oms.containerinsights.KubePVInventory
      run_interval 60
      log_level debug
     </source>

     #Kubernetes events
     <source>
      type kubeevents
      tag oms.containerinsights.KubeEvents
      run_interval 60
      log_level debug
      </source>

     #Kubernetes Nodes
     <source>
      type kubenodeinventory
      tag oms.containerinsights.KubeNodeInventory
      run_interval 60
      log_level debug
     </source>

     #Kubernetes health
     <source>
      type kubehealth
      tag kubehealth.ReplicaSet
      run_interval 60
      log_level debug
     </source>

     #cadvisor perf- Windows nodes
     <source>
      type wincadvisorperf
      tag oms.api.wincadvisorperf
      run_interval 60
      log_level debug
     </source>

     #Kubernetes object state - deployments
     <source>
      type kubestatedeployments
      tag oms.containerinsights.KubeStateDeployments
      run_interval 60
      log_level debug
     </source>

     #Kubernetes object state - HPA
     <source>
      type kubestatehpa
      tag oms.containerinsights.KubeStateHpa
      run_interval 60
      log_level debug
     </source>

     <filter mdm.kubenodeinventory**>
      type filter_inventory2mdm
      log_level info
     </filter>

     #custom_metrics_mdm filter plugin for perf data from windows nodes
     <filter mdm.cadvisorperf**>
      type filter_cadvisor2mdm
      metrics_to_collect cpuUsageNanoCores,memoryWorkingSetBytes,pvUsedBytes
      log_level info
     </filter>

     #health model aggregation filter
     <filter kubehealth**>
      type filter_health_model_builder
     </filter>

     <match oms.containerinsights.KubePodInventory**>
      type out_oms
      log_level debug
      num_threads 2
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_oms_kubepods*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
     </match>

     <match oms.containerinsights.KubePVInventory**>
     type out_oms
     log_level debug
     num_threads 5
     buffer_chunk_limit 4m
     buffer_type file
     buffer_path %STATE_DIR_WS%/state/out_oms_kubepv*.buffer
     buffer_queue_limit 20
     buffer_queue_full_action drop_oldest_chunk
     flush_interval 20s
     retry_limit 10
     retry_wait 5s
     max_retry_wait 5m
    </match>

     <match oms.containerinsights.KubeEvents**>
      type out_oms
      log_level debug
      num_threads 2
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_oms_kubeevents*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
     </match>

     <match oms.containerinsights.KubeServices**>
      type out_oms
      log_level debug
      num_threads 2
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_oms_kubeservices*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
     </match>

     <match oms.containerinsights.KubeNodeInventory**>
      type out_oms
      log_level debug
      num_threads 2
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/state/out_oms_kubenodes*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
     </match>

     <match oms.containerinsights.ContainerNodeInventory**>
      type out_oms
      log_level debug
      num_threads 3
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_oms_containernodeinventory*.buffer
      buffer_queue_limit 20
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
     </match>

     <match oms.api.KubePerf**>
      type out_oms
      log_level debug
      num_threads 2
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_oms_kubeperf*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
     </match>

     <match mdm.kubepodinventory** mdm.kubenodeinventory** >
      type out_mdm
      log_level debug
      num_threads 5
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_mdm_*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
      retry_mdm_post_wait_minutes 30
     </match>

     <match oms.api.wincadvisorperf**>
      type out_oms
      log_level debug
      num_threads 5
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_oms_api_wincadvisorperf*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
     </match>

     <match mdm.cadvisorperf**>
      type out_mdm
      log_level debug
      num_threads 5
      buffer_chunk_limit 4m
      buffer_type file
      buffer_path %STATE_DIR_WS%/out_mdm_cdvisorperf*.buffer
      buffer_queue_limit 20
      buffer_queue_full_action drop_oldest_chunk
      flush_interval 20s
      retry_limit 10
      retry_wait 5s
      max_retry_wait 5m
      retry_mdm_post_wait_minutes 30
     </match>

    <match kubehealth.Signals**>
     type out_oms
     log_level debug
     num_threads 5
     buffer_chunk_limit 4m
     buffer_type file
     buffer_path %STATE_DIR_WS%/out_oms_kubehealth*.buffer
     buffer_queue_limit 20
     buffer_queue_full_action drop_oldest_chunk
     flush_interval 20s
     retry_limit 10
     retry_wait 5s
     max_retry_wait 5m
    </match>

    <match oms.api.InsightsMetrics**>
     type out_oms
     log_level debug
     num_threads 5
     buffer_chunk_limit 4m
     buffer_type file
     buffer_path %STATE_DIR_WS%/out_oms_insightsmetrics*.buffer
     buffer_queue_limit 20
     buffer_queue_full_action drop_oldest_chunk
     flush_interval 20s
     retry_limit 10
     retry_wait 5s
     max_retry_wait 5m
    </match>

metadata:
  name: omsagent-rs-config
  namespace: kube-system
---
apiVersion: v1
kind: Secret
metadata:
  name: omsagent-secret
  namespace: kube-system
type: Opaque
data:
  #BASE64 ENCODED (Both WSID & KEY) INSIDE DOUBLE QUOTE ("")
  WSID: "VALUE_WSID"
  KEY: "VALUE_KEY"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: omsagent
  namespace: kube-system
  labels:
    component: oms-agent
    tier: node
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      component: oms-agent
      tier: node
  template:
    metadata:
      labels:
        component: oms-agent
        tier: node
      annotations:
        agentVersion: "1.10.0.1"
        dockerProviderVersion: "16.0.0-0"
        schema-versions: "v1"
    spec:
      serviceAccountName: omsagent
      dnsConfig:
        options:
          - name: ndots
            value: "3"
      containers:
        - name: omsagent
          image: "mcr.microsoft.com/azuremonitor/containerinsights/ciprod:ciprod08052021"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 500m
              memory: 600Mi
            requests:
              cpu: 75m
              memory: 225Mi
          env:
            # azure devops pipeline uses AKS_RESOURCE_ID and AKS_REGION hence ensure to uncomment these
            - name: AKS_RESOURCE_ID
              value: "VALUE_AKS_RESOURCE_ID_VALUE"
            - name: AKS_REGION
              value: "VALUE_AKS_RESOURCE_REGION_VALUE"
            # this used for e2e test and setting this just emits some additional log statements which used for the e2e tests
            - name: ISTEST
              value: "true"
            #Uncomment below two lines for ACS clusters and set the cluster names manually. Also comment out the above two lines for ACS clusters
            #- name: ACS_RESOURCE_NAME
            #  value: "my_acs_cluster_name"
            - name: CONTROLLER_TYPE
              value: "DaemonSet"
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            # Update this with the user assigned msi client id for omsagent
            - name: USER_ASSIGNED_IDENTITY_CLIENT_ID
              value: ""
            - name: AZMON_CONTAINERLOGS_ONEAGENT_REGIONS
              value: "koreacentral,norwayeast,eastus2"
            - name: USING_AAD_MSI_AUTH
              value: "false"
          securityContext:
            privileged: true
          ports:
            - containerPort: 25225
              protocol: TCP
            - containerPort: 25224
              protocol: UDP
          volumeMounts:
            - mountPath: /hostfs
              name: host-root
              readOnly: true
            - mountPath: /var/run/host
              name: docker-sock
            - mountPath: /var/log
              name: host-log
            - mountPath: /var/lib/docker/containers
              name: containerlog-path
              readOnly: true
            - mountPath: /mnt/docker
              name: containerlog-path-2
              readOnly: true
            - mountPath: /mnt/containers
              name: containerlog-path-3
              readOnly: true
            - mountPath: /etc/kubernetes/host
              name: azure-json-path
            - mountPath: /etc/omsagent-secret
              name: omsagent-secret
              readOnly: true
            - mountPath: /etc/config/settings
              name: settings-vol-config
              readOnly: true
            - mountPath: /etc/config/settings/adx
              name: omsagent-adx-secret
              readOnly: true
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /opt/livenessprobe.sh
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 15
#Only in sidecar scraping mode
        # - name: omsagent-prometheus
        #   image: "mcr.microsoft.com/azuremonitor/containerinsights/ciprod:ciprod06112021"
        #   imagePullPolicy: IfNotPresent
        #   resources:
        #     limits:
        #       cpu: 500m
        #       memory: 1Gi
        #     requests:
        #       cpu: 75m
        #       memory: 225Mi
        #   env:
        #     # azure devops pipeline uses AKS_RESOURCE_ID and AKS_REGION hence ensure to uncomment these
        #     - name: AKS_CLUSTER_NAME
        #       value: "VALUE_AKS_CLUSTER_NAME"
        #     - name: AKS_RESOURCE_ID
        #       value: "VALUE_AKS_RESOURCE_ID_VALUE"
        #     - name: AKS_REGION
        #       value: "VALUE_AKS_RESOURCE_REGION_VALUE"
        #     - name: AKS_NODE_RESOURCE_GROUP
        #       value: "VALUE_AKS_NODE_RESOURCE_GROUP"
        #     #Uncomment below two lines for ACS clusters and set the cluster names manually. Also comment out the above two lines for ACS clusters
        #     #- name: ACS_RESOURCE_NAME
        #     #  value: "my_acs_cluster_name"
        #     - name: CONTAINER_TYPE
        #       value: "PrometheusSidecar"
        #     - name: CONTROLLER_TYPE
        #       value: "DaemonSet"
        #     - name: NODE_IP
        #       valueFrom:
        #         fieldRef:
        #           fieldPath: status.hostIP
        #     # Update this with the user assigned msi client id for omsagent
        #     - name: USER_ASSIGNED_IDENTITY_CLIENT_ID
        #       value: ""
        #     - name: USING_AAD_MSI_AUTH
        #       value: "false"
        #    securityContext:
        #     privileged: true
        #   volumeMounts:
        #     - mountPath: /etc/kubernetes/host
        #       name: azure-json-path
        #     - mountPath: /etc/omsagent-secret
        #       name: omsagent-secret
        #       readOnly: true
        #     - mountPath: /etc/config/settings
        #       name: settings-vol-config
        #       readOnly: true
        #     - mountPath: /etc/config/osm-settings
        #       name: osm-settings-vol-config
        #       readOnly: true
        #   livenessProbe:
        #     exec:
        #       command:
        #         - /bin/bash
        #         - -c
        #         - /opt/livenessprobe.sh
        #     initialDelaySeconds: 60
        #     periodSeconds: 60
        #     timeoutSeconds: 15
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - labelSelector:
                matchExpressions:
      # kubernetes.io/os label doesnt exist in k8s versions < 1.14  so make sure to choose label based on k8s version in aks yaml
                  - key: kubernetes.io/os
                    operator: In
                    values:
                    - linux
                  - key: type
                    operator: NotIn
                    values:
                      - virtual-kubelet
      # Tolerate a NoSchedule taint on master that ACS Engine sets.
      tolerations:
        - operator: "Exists"
          effect: "NoSchedule"
        - operator: "Exists"
          effect: "NoExecute"
        - operator: "Exists"
          effect: "PreferNoSchedule"
      volumes:
        - name: host-root
          hostPath:
            path: /
        - name: docker-sock
          hostPath:
            path: /var/run
        - name: container-hostname
          hostPath:
            path: /etc/hostname
        - name: host-log
          hostPath:
            path: /var/log
        - name: containerlog-path
          hostPath:
            path: /var/lib/docker/containers
        - name: containerlog-path-2
          hostPath:
            path: /mnt/docker
        - name: containerlog-path-3
          hostPath:
            path: /mnt/containers
        - name: azure-json-path
          hostPath:
            path: /etc/kubernetes
        - name: omsagent-secret
          secret:
            secretName: omsagent-secret
        - name: settings-vol-config
          configMap:
            name: container-azm-ms-agentconfig
            optional: true
        - name: omsagent-adx-secret
          secret:
            secretName: omsagent-adx-secret
            optional: true
        - name: osm-settings-vol-config
          configMap:
            name: container-azm-ms-osmconfig
            optional: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: omsagent-rs
  namespace: kube-system
  labels:
    component: oms-agent
    tier: node
spec:
  replicas: 1
  selector:
    matchLabels:
      rsName: "omsagent-rs"
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        rsName: "omsagent-rs"
      annotations:
        agentVersion: "1.10.0.1"
        dockerProviderVersion: "16.0.0-0"
        schema-versions: "v1"
    spec:
      serviceAccountName: omsagent
      containers:
        - name: omsagent
          image: "mcr.microsoft.com/azuremonitor/containerinsights/ciprod:ciprod08052021"
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 150m
              memory: 250Mi
          env:
            - name: AKS_RESOURCE_ID
              value: "VALUE_AKS_RESOURCE_ID_VALUE"
            - name: AKS_REGION
              value: "VALUE_AKS_RESOURCE_REGION_VALUE"
            # this used for e2e test and setting this just emits some additional log statements which used for the e2e tests
            - name: ISTEST
              value: "true"
            # Uncomment below two lines for ACS clusters and set the cluster names manually. Also comment out the above two lines for ACS clusters
            #- name: ACS_RESOURCE_NAME
            #  value: "my_acs_cluster_name"
            - name: CONTROLLER_TYPE
              value: "ReplicaSet"
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            # Update this with the user assigned msi client id for omsagent
            - name: USER_ASSIGNED_IDENTITY_CLIENT_ID
              value: ""
            # Add the below environment variable to true only in sidecar enabled regions, else set it to false
            - name: SIDECAR_SCRAPING_ENABLED
              value: "false"
            - name: USING_AAD_MSI_AUTH
              value: "false"
          securityContext:
            privileged: true
          ports:
            - containerPort: 25225
              protocol: TCP
            - containerPort: 25224
              protocol: UDP
            - containerPort: 25227
              protocol: TCP
              name: in-rs-tcp
          volumeMounts:
            - mountPath: /var/run/host
              name: docker-sock
            - mountPath: /var/log
              name: host-log
            - mountPath: /etc/kubernetes/host
              name: azure-json-path
            - mountPath: /etc/omsagent-secret
              name: omsagent-secret
              readOnly: true
            - mountPath: /etc/config
              name: omsagent-rs-config
            - mountPath: /etc/config/settings
              name: settings-vol-config
              readOnly: true
            - mountPath: /etc/config/settings/adx
              name: omsagent-adx-secret
            - mountPath: /etc/config/osm-settings
              name: osm-settings-vol-config
              readOnly: true
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - /opt/livenessprobe.sh
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: 15
      affinity:
        nodeAffinity:
          # affinity to schedule on to ephemeral os node if its available
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: storageprofile
                operator: NotIn
                values:
                - managed
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - labelSelector:
                matchExpressions:
                  - key: beta.kubernetes.io/os
                    operator: In
                    values:
                    - linux
                  - key: type
                    operator: NotIn
                    values:
                      - virtual-kubelet
      # The following label selector is removed for AKS, this is only required for non AKS
                  - key: kubernetes.io/role
                    operator: NotIn
                    values:
                      - master
      # The following tolerations are removed for AKS, this is only required for non AKS
      tolerations:
        - operator: "Exists"
          effect: "NoSchedule"
        - operator: "Exists"
          effect: "NoExecute"
        - operator: "Exists"
          effect: "PreferNoSchedule"
      volumes:
        - name: docker-sock
          hostPath:
            path: /var/run
        - name: container-hostname
          hostPath:
            path: /etc/hostname
        - name: host-log
          hostPath:
            path: /var/log
        - name: azure-json-path
          hostPath:
            path: /etc/kubernetes
        - name: omsagent-secret
          secret:
            secretName: omsagent-secret
        - name: omsagent-rs-config
          configMap:
            name: omsagent-rs-config
        - name: settings-vol-config
          configMap:
            name: container-azm-ms-agentconfig
            optional: true
        - name: omsagent-adx-secret
          secret:
            secretName: omsagent-adx-secret
            optional: true
        - name: osm-settings-vol-config
          configMap:
            name: container-azm-ms-osmconfig
            optional: true
---
  apiVersion: apps/v1
  kind: DaemonSet
  metadata:
   name: omsagent-win
   namespace: kube-system
   labels:
    component: oms-agent-win
    tier: node-win
  spec:
   updateStrategy:
    type: RollingUpdate
   selector:
    matchLabels:
      component: oms-agent-win
      tier: node-win
   template:
    metadata:
      labels:
        component: oms-agent-win
        tier: node-win
      annotations:
        agentVersion: "1.10.0.1"
        dockerProviderVersion: "16.0.0-0"
        schema-versions: "v1"
    spec:
     serviceAccountName: omsagent
     dnsConfig:
        options:
          - name: ndots
            value: "3"
     containers:
       - name: omsagent-win
         image: "mcr.microsoft.com/azuremonitor/containerinsights/ciprod:win-ciprod06112021-2"
         imagePullPolicy: IfNotPresent
         resources:
          limits:
           cpu: 200m
           memory: 600Mi
         env:
          # azure devops pipeline uses AKS_RESOURCE_ID and AKS_REGION hence ensure to uncomment these
          - name: AKS_RESOURCE_ID
            value: "VALUE_AKS_RESOURCE_ID_VALUE"
          - name: AKS_REGION
            value: "VALUE_AKS_RESOURCE_REGION_VALUE"
          #- name: ACS_RESOURCE_NAME
          #  value: "my_acs_cluster_name"
          - name: CONTROLLER_TYPE
            value: "DaemonSet"
          - name: HOSTNAME
            valueFrom:
               fieldRef:
                 fieldPath: spec.nodeName
          - name: PODNAME
            valueFrom:
               fieldRef:
                 fieldPath: metadata.name
          - name: NODE_IP
            valueFrom:
               fieldRef:
                 fieldPath: status.hostIP
          - name: SIDECAR_SCRAPING_ENABLED
            value: "false"
          # Update this with the user assigned msi client id for omsagent
          - name: USER_ASSIGNED_IDENTITY_CLIENT_ID
            value: ""
          # Add this only for clouds that require cert bootstrapping
          # - name: REQUIRES_CERT_BOOTSTRAP
          #   value: "true"
         volumeMounts:
          - mountPath: C:\ProgramData\docker\containers
            name: docker-windows-containers
            readOnly: true
          - mountPath: C:\var #Read + Write access on this for position file
            name: docker-windows-kuberenetes-container-logs
          - mountPath: C:\etc\config\settings
            name: settings-vol-config
            readOnly: true
          - mountPath: C:\etc\omsagent-secret
            name: omsagent-secret
            readOnly: true
          - mountPath: C:\etc\config\adx
            name: omsagent-adx-secret
            readOnly: true
          # Need to mount this only for airgapped clouds - Commenting this since it wont exist in non airgapped clouds
          # - mountPath: C:\ca
          #   name: ca-certs
          #   readOnly: true
          - mountPath: C:\etc\kubernetes\host
            name: azure-json-path
            readOnly: true
         livenessProbe:
          exec:
            command:
              - cmd
              - /c
              - C:\opt\omsagentwindows\scripts\cmd\livenessProbe.cmd
          periodSeconds: 60
          initialDelaySeconds: 180
          timeoutSeconds: 15
     affinity:
       nodeAffinity:
         requiredDuringSchedulingIgnoredDuringExecution:
           nodeSelectorTerms:
           - matchExpressions:
             - key: beta.kubernetes.io/os
               operator: In
               values:
               - windows
     tolerations:
     - key: "CriticalAddonsOnly"
       operator: "Exists"
     - operator: "Exists"
       effect: NoExecute
     - operator: "Exists"
       effect: NoSchedule
     - operator: "Exists"
       effect: PreferNoSchedule
     volumes:
      - name: docker-windows-kuberenetes-container-logs
        hostPath:
          path: C:\var
      - name: azure-json-path
        hostPath:
          path: C:\k
      # Need to mount this only for airgapped clouds - Commenting this since it wont exist in non airgapped clouds
      #- name: ca-certs
      #  hostPath:
      #    path: C:\ca
      - name: docker-windows-containers
        hostPath:
          path: C:\ProgramData\docker\containers
          type: DirectoryOrCreate
      - name: settings-vol-config
        configMap:
          name: container-azm-ms-agentconfig
          optional: true
      - name: omsagent-secret
        secret:
         secretName: omsagent-secret
      - name: omsagent-adx-secret
        secret:
          secretName: omsagent-adx-secret
          optional: true
---
kind: Service
apiVersion: v1
metadata:
  name: healthmodel-replicaset-service
  namespace: kube-system
spec:
  selector:
    rsName: "omsagent-rs"
  ports:
    - protocol: TCP
      port: 25227
      targetPort: in-rs-tcp
---
# this is for versions >=1.19, for versions <1.19 we continue to use v1beta1
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: healthstates.azmon.container.insights
  namespace: kube-system
spec:
  group: azmon.container.insights
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          state:
            type: string
  scope: Namespaced
  names:
    plural: healthstates
    kind: HealthState
